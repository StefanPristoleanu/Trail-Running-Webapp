package springrest.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import springrest.entities.Table1Repository;
import springrest.entities.TestDbTable1;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.configurationprocessor.json.JSONArray;
import org.springframework.boot.configurationprocessor.json.JSONException;
import org.springframework.boot.configurationprocessor.json.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
//import org.springframework.web.bind.annotation.PutMapping;

/**
 *
 * @author stefan  - 2018.10.14
 */
@RestController
@RequestMapping("/db-table1")
public class Table1RestController {

    @Autowired // This means to get the bean called table1Repository
    // Which is auto-generated by Spring, we will use it to handle the data
    private Table1Repository table1Repository;

    @GetMapping()
    public List<Object> list() {
        return null;
    }

    @GetMapping("/{id}")
    public Object get(@PathVariable String id) {
        return null;
    }

    /*
    curlj http://localhost:8080/db-table1/addNew -d '{"accessToken":1, "testName":"test1", "info" : "info 1 ..."}'
     */
    // @PutMapping("/{id}")
    // @PathVariable String id, 
    @PostMapping(value = "/addNew", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<?> addNew(@RequestBody String request) {
        try {
            JSONObject jsonRequest = new JSONObject(request);
            TestDbTable1 newRec = new TestDbTable1();
            if (jsonRequest.has("testName")) {
                newRec.setTestName(jsonRequest.getString("testName"));
            } else {
                String testName = "test-" + UUID.randomUUID().toString();
                newRec.setTestName(testName);
            }
            if (jsonRequest.has("info")) {
                newRec.setInfo(jsonRequest.getString("info"));
            } else {
                newRec.setInfo("info ...");
            }
            if (jsonRequest.has("value")) {
                newRec.setValue(jsonRequest.getLong("value"));
            } else {
                newRec.setValue(0);
            }
            newRec.setUpdateCounter(0);
            newRec.setLastUpdate(new java.sql.Timestamp(System.currentTimeMillis()));//new java.util.Date());
            table1Repository.save(newRec);
            JSONObject jsonResponse = new JSONObject();
            jsonResponse.put("responseCode", 0);
            jsonResponse.put("message", "OK add new record in TestTable1 for testName: " + newRec.getTestName());
            jsonResponse.put("ID", newRec.getId());
            return new ResponseEntity(jsonResponse.toString(), HttpStatus.OK);
        } catch (JSONException ex) {
            Logger.getLogger(TestRestController.class.getName()).log(Level.SEVERE, null, ex.toString());
            return new ResponseEntity(ex.toString(), HttpStatus.BAD_REQUEST);
        }
    }// end addNew

    /*
    curlj http://localhost:8080/db-table1/update -d '{"accessToken":1, "id":1, "info" : "info !"}'
     */
    @PostMapping(value = "/update", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    public ResponseEntity<?> update(@RequestBody String request) {
        try {
            JSONObject jsonRequest = new JSONObject(request);
            if (!jsonRequest.has("id")) {
                return new ResponseEntity("id tag not found", HttpStatus.BAD_REQUEST);
            }
            long id = jsonRequest.getLong("id");
            System.out.println("~~~ id: " + id);
            TestDbTable1 aRec = table1Repository.findById(id).orElse(null);
            if (aRec == null) {
                JSONObject jsonResponse = new JSONObject();
                jsonResponse.put("responseCode", -1);
                jsonResponse.put("message", "Not found a record with id: " + id);
                return new ResponseEntity(jsonResponse.toString(), HttpStatus.OK);
            }
            System.out.println("~~~ OK found rec in DB");
            if (jsonRequest.has("testName")) {
                aRec.setTestName(jsonRequest.getString("testName"));
            }
            if (jsonRequest.has("info")) {
                aRec.setInfo(jsonRequest.getString("info"));
            }
            if (jsonRequest.has("value")) {
                aRec.setValue(jsonRequest.getLong("value"));
            }
            aRec.setUpdateCounter(aRec.getUpdateCounter() + 1);
            aRec.setLastUpdate(new java.sql.Timestamp(System.currentTimeMillis()));//new java.util.Date());
            table1Repository.save(aRec);
            JSONObject jsonResponse = new JSONObject();
            jsonResponse.put("responseCode", 0);
            jsonResponse.put("message", "OK updaterecord in TestTable1 for ID: " + id);
            return new ResponseEntity(jsonResponse.toString(), HttpStatus.OK);
        } catch (JSONException ex) {
            Logger.getLogger(TestRestController.class.getName()).log(Level.SEVERE, null, ex.toString());
            return new ResponseEntity(ex.toString(), HttpStatus.BAD_REQUEST);
        }
    }// end update

    /*
        curlj http://localhost:8080/db-table1/query
        curlj http://localhost:8080/db-table1/query?idMax=5
     */
    @GetMapping("/query")
    public Object getQuery(@RequestParam Optional<Long> idMax) {
        try {
            Long idQuery = (long) 2;
            if (idMax.isPresent()) {
                idQuery = idMax.get(); //returns the idMax from path parameter (if exist)
            }
            List<TestDbTable1> recList = table1Repository.query1(idQuery);
            // for quick return with only the query result use teh next line:
            //return new ResponseEntity(recList, HttpStatus.OK);
            // for return more info:
            JSONObject jsonResponse = new JSONObject();
            jsonResponse.put("responseCode", 0);
            jsonResponse.put("message", "OK Query filter by ID <= " + idQuery);
            jsonResponse.put("querySize", recList.size());
            ObjectMapper mapper = new ObjectMapper();
            String jsonList = mapper.writeValueAsString(recList);
            jsonResponse.put("queryData", new JSONArray(jsonList));
            return new ResponseEntity(jsonResponse.toString(), HttpStatus.OK);
        } catch (JsonProcessingException | JSONException ex) {
            Logger.getLogger(TestRestController.class.getName()).log(Level.SEVERE, null, ex.toString());
            return new ResponseEntity(ex.toString(), HttpStatus.BAD_REQUEST);
        }
    }// end getQuery

    @PostMapping
    public ResponseEntity<?> post(@RequestBody Object input) {
        return null;
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete(@PathVariable String id) {
        return null;
    }

}
